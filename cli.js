#!/usr/bin/env node
global.__dirname = process.cwd();
global.module = module;
(function(){
  var fs, path, yargs, livescript, argv, ref$, src, dist, bare, header, code, filepath;
  fs = require('fs');
  path = require('path');
  yargs = require('yargs');
  livescript = require('./livescript.min.js');
  argv = yargs.command("ls2 <filepath>", "Run filepath").command("ls2 -c <src> <dist>", "Compile src to dist").option('c', {
    alias: 'compile',
    type: 'array',
    describe: "Compile src to dist"
  }).option('b', {
    alias: 'bare',
    type: 'boolean',
    'default': false,
    describe: "Compile without the top-level function wrapper"
  }).option('e', {
    alias: 'header',
    type: 'boolean',
    'default': true,
    describe: "Add the \"Generated by\" header"
  }).option('n', {
    type: 'boolean',
    describe: "Negate of --header"
  }).alias('h', 'help').alias('v', 'version').argv;
  switch (false) {
  case !argv.compile:
    if (argv.compile.length < 2) {
      throw Error("Missing <src> or <dist> args");
    } else {
      ref$ = argv.compile, src = ref$[0], dist = ref$[1];
      bare = argv.bare, header = argv.header;
      src = path.resolve(__dirname, src);
      dist = path.resolve(__dirname, dist);
      if (argv.n) {
        header = false;
      }
      code = fs.readFileSync(src, 'utf8');
      code = livescript.compile(code, {
        bare: bare,
        header: header
      });
      fs.writeFileSync(dist, code);
    }
    break;
  default:
    filepath = argv._[0];
    if (filepath) {
      global.require = function(file){
        if (/^\.{0,2}\//.test(file)) {
          return module.require(path.resolve(__dirname, file));
        } else {
          return module.require(file);
        }
      };
      if (!filepath.endsWith('.ls')) {
        filepath += '.ls';
      }
      filepath = path.resolve(__dirname, filepath);
      code = fs.readFileSync(filepath, 'utf8');
      code = livescript.compile(code);
      global.eval(code);
    }
  }
}.call(this));